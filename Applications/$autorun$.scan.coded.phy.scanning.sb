// Copyright (c) 2013, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// $autorun$.scan.coded.phy.scanning.sb
//
// This app is used for scanning over long range (CODED PHY)
//  Load $autorun$.adv.coded.phy.adverts.sb in  another BL653 for LE_CODED adverts
//  to be sent
//
//******************************************************************************
// Definitions
//******************************************************************************
#define BLE_GAP_1M_PHY                    1
#define BLE_GAP_CODED_PHY                 4

#define SCAN_TIMEOUT_MS                   10000
#define SCAN_PHYS_ALL                     0x7
#define SCAN_CHAN_MASK                    ""

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc
dim priPhy,secPhy

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
  print "\nScanning stopped via timeout"
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  //This is not a long range advert so ignore
endfunc 1

//==============================================================================
//==============================================================================
sub PrintMetadata(metadata$)
  dim val, chnl, dontcare$

  val=BleExtRptMetadata(metadata$,1)
  print "\n       :MD(sId=";val

  val=BleExtRptMetadata(metadata$,2)
  sprint #dontcare$, integer.h' val
  print " dId=";right$(dontcare$,4)

  priPhy=BleExtRptMetadata(metadata$,3)
  print " pPhy=";priPhy

  secPhy=BleExtRptMetadata(metadata$,4)
  print " sPhy=";secPhy

  chnl=BleExtRptMetadata(metadata$,5)
  print " chn=";chnl

  val=BleExtRptMetadata(metadata$,6)
  if chnl<19 then
    print "  txp=";val;")"
  else
    print  " txp=";val;")"
  endif

  //now print the status on a seperate line
  val=BleExtRptMetadata(metadata$,7)
  print "\n       :MD(status=";val;")"

endsub

//==============================================================================
//==============================================================================
function HndlrExtAdvRpt(byval ad$,byval dta$,rsi,byval metadata$) as integer
  print "\nEXT ADV:";strhexize$(ad$);" AD:";strlen(dta$);":";strhexize$(dta$);" RS:";rsi
  PrintMetadata(metadata$)
endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//Start scanning for 1M and LE_CODED
rc=BleScanStartEx(SCAN_TIMEOUT_MS, SCAN_PHYS_ALL, SCAN_CHAN_MASK, 0)
if rc == 0 then
  print "\nSuccessfully started scanning over 1M and CODED PHY"
else
  print "\nFailed to scan with error code ";integer.h' rc
endif

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt
OnEvent  EVBLE_EXTADV_RPT         call HndlrExtAdvRpt

//------------------------------------------------------------------------------
// Wait for a synchronous event.
//------------------------------------------------------------------------------
WaitEvent


