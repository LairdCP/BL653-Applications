// Copyright (c) 2013, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// $autorun$.conn.coded.phy.connection.sb
//
// This app scans for devices over CODED PHY and attempts to connect to the first
// device that it finds
//
//
//******************************************************************************
// Definitions
//******************************************************************************
#define BLE_GAP_1M_PHY                    1
#define BLE_GAP_CODED_PHY                 4
#define BLE_GAP_NORMAL_SCANNING           0
#define BLE_GAP_EXTENDED_SCANNING         1
#define ENABLE_HIGH_BANDWIDTH_KEY_ID      214    // CFG ID 214
#define BLE_ENABLE_HIGH_BANDWIDTH         1      // 0: medium bandwidth 1: high bandwidth

//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                          0 // msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                       1 // msgCtx = connection handle
#define BLE_EVBLEMSGID_IMMEDIATE_ALERT_SERVICE_ALERT    2 // msgCtx = alert level
#define BLE_EVBLEMSGID_LINKLOSS_SERVICE_ALERT           3 // msgCtx = alert level
#define BLE_EVBLEMSGID_SERVICE_ERROR                    4 // msgCtx = resultcode
#define BLE_EVBLEMSGID_HTS_INDICATION_STATE             5 // msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_HTS_INDICATION_CNF               6 // msgCtx = not used
#define BLE_EVBLEMSGID_BPS_INDICATION_STATE             7 // msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_BPS_INDICATION_CNF               8 // msgCtx = not used
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY                  9 // msgCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                        10 // msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST                11 // msgCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE          12 // msgCtx = new notification state 0=off, 1=on

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc,addr$, nBandwidth

//-------------------------------------------------------------------------------
// This function is used to configure the BL653 to use high bandwidth
//-------------------------------------------------------------------------------
FUNCTION BleHighBandwidth()

    // Get current bandwidth configuration
  rc = NvCfgKeyGet(ENABLE_HIGH_BANDWIDTH_KEY_ID, nBandwidth)

    // Check if these are the values needed to achieve DLE
    IF  (nBandwidth != BLE_ENABLE_HIGH_BANDWIDTH) THEN
        // Change the bandwidth configuration to HIGH
        rc = NvCfgKeySet(ENABLE_HIGH_BANDWIDTH_KEY_ID, BLE_ENABLE_HIGH_BANDWIDTH)
        // Reset the module so that the data is overwritten
        Reset(0)
    ENDIF

ENDFUNC 0

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
  print "\nScanning stopped via timeout"
endfunc 1

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
        print "\nSuccessfully connected"
  case else
  endselect
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  dim ad$,dta$,ndisc,rsi
  rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  if rc==0 then
    print "\nADV:";strhexize$(ad$);" ";strhexize$(dta$);" ";ndisc;" ";rsi
    rc = BleConnect(ad$, 5000, 7500, 300000, 5000000)
    if rc == 0 then
      print "\nConnecting to ";strhexize$(ad$);" ..."
    else
      print "\nFailed to connect to device ";strhexize$(ad$);" with error code ";integer.h' rc
    endif
  endif
endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

// Enable high bandwidth
rc = BleHighBandwidth()

// Set Scanning PHYs to CODED PHY, enable extended scanning
rc = BleScanConfig(4,BLE_GAP_CODED_PHY)
rc = BleScanConfig(5,BLE_GAP_EXTENDED_SCANNING)
// Set connection PHYs to CODED PHY, enable extended connection
rc = BleConnectConfig(10,BLE_GAP_CODED_PHY)
rc = BleConnectConfig(11,BLE_GAP_EXTENDED_SCANNING)

// Start scanning
rc = BleScanStart(10000, 0)
if rc == 0 then
  print "\nSuccessfully started scanning over CODED PHY"
else
  print "\nFailed to scan with error code ";integer.h' rc
endif

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt
OnEvent  EVBLEMSG                 call HandlerBleMsg

//------------------------------------------------------------------------------
// Wait for a synchronous event.
//------------------------------------------------------------------------------
WaitEvent


