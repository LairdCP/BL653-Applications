// Copyright (c) 2021, Laird Connectivity
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// $autorun$.conn.coded.phy.connection.sb
//
// This app scans for devices over CODED PHY and attempts to connect to the first
// device that it finds.
//
// Load another BL653 device with $autorun$.adv.coded.phy.adverts.sb to send
// coded adverts
//
//******************************************************************************
// Definitions
//******************************************************************************
#define BLE_GAP_1M_PHY                    1
#define BLE_GAP_CODED_PHY                 4
#define BLE_GAP_NORMAL_SCANNING           0
#define BLE_GAP_EXTENDED_SCANNING         1

#define SCAN_TIMEOUT_MS                   10000
#define SCAN_PHYS_ALL                     0x7
#define SCAN_CHAN_MASK                    ""

#define CONNTIMEOUTMS                     5000
#define MINCONNINTUS                      7500
#define MAXCONNINTUS                      300000
#define SUPRVSNTOURUS                     5000000

//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                          0 // msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                       1 // msgCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR                    4 // msgCtx = resultcode
#define BLE_EVBLEMSGID_NEW_BOND                        10 // msgCtx = connection handle

// Metadata fields for BleExtRptMetadata()
#define EXTRACT_METADATA_SET_ID                         1
#define EXTRACT_METADATA_DATA_ID                        2
#define EXTRACT_METADATA_PRIMARY_PHY                    3
#define EXTRACT_METADATA_SECONDARY_PHY                  4
#define EXTRACT_METADATA_CHANNEL_INDEX                  5
#define EXTRACT_METADATA_TX_POWER                       6 // This field is set to 127 if the report does not contain the TxPower field
#define EXTRACT_METADATA_STATUS                         7 // 0=Complete
                                                          // 1=INCOMPLETE_MORE_DATA - More data to be received
                                                          // 2=INCOMPLETE_TRUNCATED - Buffer size insufficient to receive more
                                                          // 3=INCOMPLETE_MISSED    - Failed to receive the remaining data

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc
dim priPhy, secPhy

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
    print "\nScanning stopped via timeout"
endfunc 1

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        print "\nSuccessfully connected on LECODED phy"
    case else
    endselect
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
    //This is not a long range advert so ignore
endfunc 1

//==============================================================================
//==============================================================================
sub PrintMetadata(metadata$)
    dim val, chnl, tmpVar$

    val = BleExtRptMetadata(metadata$,EXTRACT_METADATA_SET_ID)
    print "\n       :MD(sId=";val

    val = BleExtRptMetadata(metadata$,EXTRACT_METADATA_DATA_ID)
    sprint #tmpVar$, integer.h' val
    print " dId=";right$(tmpVar$,4)

    priPhy = BleExtRptMetadata(metadata$,EXTRACT_METADATA_PRIMARY_PHY)
    print " pPhy=";priPhy

    secPhy = BleExtRptMetadata(metadata$,EXTRACT_METADATA_SECONDARY_PHY)
    print " sPhy=";secPhy

    chnl = BleExtRptMetadata(metadata$,EXTRACT_METADATA_CHANNEL_INDEX)
    print " chn=";chnl

    val = BleExtRptMetadata(metadata$,EXTRACT_METADATA_TX_POWER)
    if chnl < 19 then
      print "  txp=";val;")"
    else
      print  " txp=";val;")"
    endif

    //now print the status on a seperate line
    val = BleExtRptMetadata(metadata$,EXTRACT_METADATA_STATUS)
    print "\n       :MD(status=";val;")"
endsub

//==============================================================================
//==============================================================================
function HndlrExtAdvRpt(byval ad$, byval dta$, rsi, byval metadata$) as integer
  print "\nEXT ADV:";strhexize$(ad$);" AD:";strlen(dta$);":";strhexize$(dta$);" RS:";rsi
  PrintMetadata(metadata$)

  if (priPhy == BLE_GAP_CODED_PHY) && (secPhy == BLE_GAP_CODED_PHY) then
    //only connect if both pri and sec phy were long range
    rc = BleConnectExtended(ad$, CONNTIMEOUTMS, MINCONNINTUS, MAXCONNINTUS, SUPRVSNTOURUS, 1 , 0)
    if rc == 0 then
      print "\nConnecting to ";strhexize$(ad$);" ..."
    else
      print "\nFailed to connect to device ";strhexize$(ad$);" with error code ";integer.h' rc
    endif
  endif

endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//Start scanning for 1M and LE_CODED
rc = BleScanStartEx(SCAN_TIMEOUT_MS, SCAN_PHYS_ALL, SCAN_CHAN_MASK, 0)
if rc == 0 then
  print "\nSuccessfully started scanning over 1M and CODED PHY"
else
  print "\nFailed to scan with error code ";integer.h' rc
endif

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt
OnEvent  EVBLE_EXTADV_RPT         call HndlrExtAdvRpt
OnEvent  EVBLEMSG                 call HandlerBleMsg

//------------------------------------------------------------------------------
// Wait for a synchronous event.
//------------------------------------------------------------------------------
WaitEvent
